var isApply = [{ name: "请选择", value: '' }, { name: "已申请", value: 1 }, { name: "未申请", value: 0 },]; var isRecommend = [{ name: "请选择", value: '' }, { name: "已推荐", value: 1 }, { name: "未推荐", value: 0 },]; var sh = [{ name: "全部", value: 0 }, { name: "审核不通过", value: 1, css: "txt_red" }, { name: "等待审核", value: 2, css: "txt_yellow" }, { name: "等待指导教师审核", value: 5, css: "txt_yellow" }, { name: "等待专业负责人审核", value: 6, css: "txt_yellow" }, { name: "等待教学秘书审核", value: 7, css: "txt_yellow" }, { name: "等待院长审核", value: 8, css: "txt_yellow" }, { name: "等待管理员审核", value: 1002, css: "txt_yellow" }, { name: "不审核", value: 1003, css: "" }, { name: "审核通过", value: 3, css: "txt_green" }]; var dyxq = [{ name: "请选择", value: '' }, { name: "星期一", value: 1 }, { name: "星期二", value: 2 }, { name: "星期三", value: 3 }, { name: "星期四", value: 4 }, { name: "星期五", value: 5 }, { name: "星期六", value: 6 }, { name: "星期日", value: 7 },]; var xzms = [{ name: "全部", value: 0 }, { name: "师生互选题目", value: 1 }, { name: "指定学生题目", value: 2 }, { name: "学生申报题目", value: 3 }, { name: "团队题目", value: 4 }]; var taskstatic = [{ name: "全部", value: "all", "selected": true }, { name: "学生提交", value: "2" }, { name: "教师提交", value: "1" }, { name: "未提交", value: "0" }]; var Taskxf = [{ name: "全部", value: "all", "selected": true }, { name: "已下发", value: "1" }, { name: "未下发", value: "0" }]; var Auditor = [{ name: "全部", value: "", "selected": true }, { name: "未审核", value: "0" }, { name: "审核通过", value: "1" }, { name: "审核不通过", value: "-1" }]; var entrust_state = [{ name: "全部", value: "", "selected": true }, { name: "未分配", value: "0" }, { name: "已分配", value: "1" }]; var subjecttocheckt_state = [{ name: "全部", value: 0 }, { name: "等待检查", value: 1 }, { name: "已检查", value: 2 }]; var student_state = [{ name: "全部", value: 0 }, { name: "启用", value: 2 }, { name: "暂停", value: 1 }]; var teacher_role = [{ name: "全部", value: 0 }, { name: "院长", value: 7 }, { name: "教学秘书", value: 6 }, { name: "专业负责人", value: 5 }, { name: "指导教师", value: 4 }, { name: "督导专家", value: 9 }, { name: "评阅专家", value: 10 }]; var teacher_type = [{ name: "请选择", value: 0 }, { name: "全职", value: 2 }, { name: "兼职", value: 3 }]; var project_select = [{ name: "请选择", value: 0 }, { name: "已确定双选", value: 1 }, { name: "等待确认过程中", value: 2 }, { name: "未进行或未通过双选", value: 3 }]; var school_year = [{ name: "请选择", value: 0 }, { name: "申报题目", value: 1 }, { name: "学生选题", value: 9 }, { name: "提交任务书", value: 10 }, { name: "提交开题报告", value: 2 }, { name: "提交初期检查", value: 12 }, { name: "提交中期检查", value: 3 }, { name: "提交指导记录", value: 5 }, { name: "提交文献综述", value: 6 }, { name: "提交外文译文", value: 7 }, { name: "提交初稿", value: 13 }, { name: "提交毕设论文", value: 4 }, { name: "评审和答辩", value: 8 }, { name: "推优模块", value: 11 }]; var Export_type = [{ name: "无需导出", value: -1 }, { name: "WORD", value: 0 }, { name: "PDF", value: 1 }, { name: "WORD和PDF", value: 2 }]; var Special_Type = [{ name: "请选择", value: 0 }, { name: "文科", value: 1 }, { name: "理工科", value: 2 }]; var declarant_role = [{ name: "全部", value: "all", "selected": true }, { name: "教师", value: 1 }, { name: "学生", value: 0 }]; var submitState = [{ name: "全部", value: "all", "selected": true }, { name: "未提交", value: 0 }, { name: "已提交", value: 1 }]; var attachmentStatus = [{ name: "全部", value: "all", "selected": true }, { name: "未上传附件", value: 0 }, { name: "有上传附件", value: 1 }]; var wordStatus = [{ name: "全部", value: "all", "selected": true }, { name: "未上传文档", value: 0 }, { name: "有上传文档", value: 1 }]; var auditor = [{ name: "全部", value: "all", "selected": true }, { name: "审核通过", value: 1 }, { name: "等待审核", value: 0 }, { name: "审核不通过", value: -1 }]; var dbcj = [{ name: "全部", value: "0", "selected": true }, { name: "一辩成绩", value: 1 }, { name: "二辩成绩", value: 2 }]; var pyzj = [{ name: "全部", value: "-1", "selected": true }, { name: "无评阅专家", value: 0 }, { name: "已经安排评阅专家", value: 1 }]; var Special_DisciplineGenre = [{ name: "请选择", value: 0 }, { name: "哲学", value: 1 }, { name: "经济学", value: 2 }, { name: "法学", value: 3 }, { name: "教育学", value: 4 }, { name: "文学", value: 5 }, { name: "历史学", value: 6 }, { name: "理学", value: 7 }, { name: "工学", value: 8 }, { name: "农学", value: 9 }, { name: "医学", value: 10 }, { name: "军事学", value: 11 }, { name: "管理学", value: 12 }, { name: "艺术学", value: 13 }]; var answer_grade = [{ name: "请选择", value: -1, "selected": true }, { name: " >=60 ", value: 1 }, { name: " >=70 ", value: 2 }, { name: " >=80 ", value: 3 }, { name: " >=90 ", value: 4 }]; var answer_reproduction_ratio = [{ name: "请选择", value: -1, "selected": true }, { name: " <= 5% ", value: 1 }, { name: " <= 10% ", value: 2 }, { name: " <= 15% ", value: 3 }, { name: " <= 20% ", value: 4 }, { name: " <= 25% ", value: 5 }, { name: " <= 30% ", value: 6 }, { name: " <= 35% ", value: 7 }, { name: " <= 40% ", value: 8 }, { name: " <= 45% ", value: 9 }, { name: " <= 50% ", value: 10 }]; function school_init() { var rs = false; $.ajax({ url: "../Handler/LoginHandler.ashx?action=imgurl", data: { "dp": getUrlParam("dp") }, async: false, dataType: "json", type: "POST", success: function (data) { $("#wait_main").hide(); if (data.isSuccess) { if (data.rows[0]["是否显示学校名称"] == 0 || checkValIsUndefinedOrNull(data.rows[0]["学校名称"])) { $("#school_name").hide() } else { $("#school_name").show(); $("#school_name").text(data.rows[0]["学校名称"]) } if (!checkValIsUndefinedOrNull(data.rows[0]["是否显示校徽"]) && data.rows[0]["是否显示校徽"] == 0) { $("#school_logo").hide() } else { $("#school_logo").show(); if (data.rows[0]["图片路径"]) { $("#school_logo").attr("src", data.rows[0]["图片路径"]) } else { $("#school_logo").attr("src", 'Themes/default/images/loginLogo.png') } } if (data.rows[0]["系统名称"]) { $("#xtmc").text(data.rows[0]["系统名称"]); document.title = data.rows[0]["系统名称"] }; $("#xtmc").show(); $("#login_main").removeAttr("style"); rs = true } else { if (data.total == 0) { $("#no_main").show(); $("body").attr("style", "background-color:#daeff4;") } } }, error: function (err) { console.log(err) } }); return rs }; var cur_role_id = ""; function school_load(show) { if (show == undefined) { show = true }; $.ajax({ url: "../Handler/UserHandler.ashx?action=GetUserRoleName", async: false, dataType: "json", type: "POST", success: function (data) { if (data.isSuccess) { if (show) { var userInfo = data.dataList.userInfo; if (!checkValIsUndefinedOrNull(userInfo[0]["是否显示校徽"]) && userInfo[0]["是否显示校徽"] == 0) { $("#school_logo").hide() } else { $("#school_logo").show(); if (userInfo[0]["图片"]) { $("#school_logo").attr("src", userInfo[0]["图片"]) } else { $("#school_logo").attr("src", 'Themes/default/images/loginLogo.png') } } if (userInfo[0]["是否显示学校名称"] == 0 || checkValIsUndefinedOrNull(userInfo[0]["学校名称"])) { $("#school_name").hide() } else { $("#school_name").show(); $("#school_name").text(userInfo[0]["学校名称"]); if (userInfo[0]["是否显示校徽"] == 0) { $("#school_name").parent().css("margin-left", "25px") } } if (userInfo[0]["系统名称"]) { $("#R_xtmc").show(); $("#R_xtmc").text(userInfo[0]["系统名称"]); document.title = userInfo[0]["系统名称"] }; if (userInfo[0]["开通写作助手"] == 1) { $("#writingHelper").show() } else { $("#writingHelper").hide() }; $(".role_name").text(userInfo[0]["角色名称"]); if (!checkValIsUndefinedOrNull(userInfo[0]["姓名"])) { $("#user_name").text(userInfo[0]["姓名"] + "(" + userInfo[0]["用户名"] + ")") } else { $("#user_name").text(userInfo[0]["用户名"]) }; $("#plan_name").text(userInfo[0]["学年"]); cur_role_id = userInfo[0]["角色ID"]; $.cookie("cur_role_id", userInfo[0]["角色ID"]); if (userInfo[0]["角色ID"] == "1") { var show_title = $("#show_title"); if (show_title != null && show_title != undefined) { show_title.text("选择学年") } } else if (userInfo[0]["角色ID"] == "2") { var show_title = $("#show_title"); if (show_title != null && show_title != undefined) { show_title.text("选择专业") } }; var userDefinedRoles = []; var roleTypes = data.dataList.roleTypes; if (roleTypes && roleTypes.length > 0) { $.each(roleTypes, function (index, item) { if (!checkValIsUndefinedOrNull(item.名称) && !checkValIsUndefinedOrNull(item.自定义编号)) { var role = {}; role["name"] = item.名称; role["value"] = item.自定义编号; if ($.inArray(role, userDefinedRoles) < 0) { userDefinedRoles.push(role) } } }) }; try { var rolesText = JSON.stringify(userDefinedRoles); $("#hdUserDefinedRoles").val(rolesText) } catch (e) { } } } }, error: function (err) { console.log(err) } }) }; function getUserDefinedRoles() { if (window.parent.getUserDefinedRoles) { return window.parent.getUserDefinedRoles() } else { return [] } }; function getRsaAutoLogin() { return ""; var authToken = getAuthToken(); if (authToken == undefined || typeof (authToken) == "undefined") { authToken = "undefined" } else if (authToken == null) { authToken = "null" } var autoLoginInfo = localStorage["CO2017_AutoLogin"]; if (autoLoginInfo == undefined || typeof (autoLoginInfo) == "undefined") { autoLoginInfo = "undefined" } else if (autoLoginInfo == null) { autoLoginInfo = "null" } var dateTime = (new Date()).getTime(); var autoLogin = { authToken: authToken, autoLoginInfo: autoLoginInfo, dateTime: dateTime, random: "V1.1" }; var publicKey = localStorage["CO2017_RsaPublicKey"] || ""; var rsa = rsaEncryptWithChar(autoLogin, publicKey); rsa = encodeURIComponent(rsa); return rsa } function getRsaAutoLoginId() { return ""; var lid = $.cookie("CO2017_AutoLoginId") || "undefined"; if (!checkValIsUndefinedOrNull(lid)) { lid = encodeURIComponent(lid) } return lid }; function getAuthToken() { var token = ""; if (self.frameElement && self.frameElement.tagName == "IFRAME") { try { token = window.parent.getAuthTokenInMain() } catch (e) { token = "" } } else { token = $("#hdAuthToken").val() } return token }; function setAuthToken(element) { $("#" + element).val(""); $.ajax({ url: "../Handler/UserHandler.ashx?action=GetAuthToken", type: "post", dataType: "json", async: false }).done(function (data) { if (data.isSuccess) { if ($("#" + element) && $("#" + element).length > 0) { $("#" + element).val(data.dataList.authToken) } else { $("body").append('<input type="hidden" id="hdAuthToken" value="' + data.dataList.authToken + '" />') } localStorage["CO2017_RsaPublicKey"] = data.dataList.rsaPublicKey } }).fail(function (err) { if (console && console.error) { console.error(err) } }) } function get_current_role() { if (!checkValIsUndefinedOrNull($.cookie("cur_role_id"))) { return $.cookie("cur_role_id") } else { school_load(); return $.cookie("cur_role_id") } }; function system_quit() { if (!isDP()) { window.location.href = 'Error.html'; return false }; $.ajax({ url: "../Handler/UserHandler.ashx?action=ExitSystem", async: false, dataType: "json", type: "POST", success: function (data) { if (data.isSuccess) { $.cookie("cur_role_id", "", { expires: -1 }); if (data.dataList && !checkValIsUndefinedOrNull(data.dataList.casLoginoutUrl)) { window.location.href = data.dataList.casLoginoutUrl } else { window.location = "Login.html?dp=" + isDP() } } } }) }; var cur_role_tid = ""; function get_current_role_tid() { if (window.parent.cur_role_tid != undefined && window.parent.cur_role_tid != "") { return window.parent.cur_role_tid } else { role_tid(); return cur_role_tid } }; function role_tid() { $.ajax({ url: "../Handler/CommonHandler.ashx?action=GetCurrentUserId", async: false, dataType: "text", type: "POST", success: function (data) { if (data != null) { cur_role_tid = data } }, error: function (err) { console.log(err) } }) }; var cur_task_type = ""; function get_task_type() { if (window.parent.cur_task_type != undefined && window.parent.cur_task_type != "") { return window.parent.cur_task_type } else { tasktype(); return cur_task_type } }; function tasktype() { $.ajax({ url: "../Handler/CommonHandler.ashx?action=GetTaskType", async: false, dataType: "text", type: "POST", success: function (data) { if (data != null) { cur_task_type = data } } }) }; var cur_project_type = ""; function get_project_type() { if (window.parent.cur_project_type != undefined && window.parent.cur_project_type != "") { return window.parent.cur_project_type } else { projecttype(); return cur_project_type } }; function projecttype() { $.ajax({ url: "../Handler/CommonHandler.ashx?action=GetProjectType", async: false, dataType: "text", type: "POST", success: function (data) { if (data != null) { cur_project_type = data } }, error: function (err) { console.log(err) } }) }; function getAuditCss(state) { var auditCss = ""; if (!checkValIsUndefinedOrNull(state)) { if (state > 0) { if (state == 1) { auditCss = 'txt_green' } else if (state == 1001) { auditCss = '' } else { auditCss = 'txt_yellow' } } else { auditCss = 'txt_red' } } return auditCss }; function getAuditStateText(state, opeType) { var text = ""; if (state == -1) { switch (+opeType) { case 1: case 2: case 3: case 5: case 7: case 10: case 14: case 15: case 16: case 26: case 27: case 29: text = "返回修改"; break; default: break } }; if (checkValIsUndefinedOrNull(text)) { if (state != -1 && state != 1 && state != 1001) { var userDefinedRoles = getUserDefinedRoles(); if (userDefinedRoles && userDefinedRoles.length > 0) { var roleState = state; if (state == 1000) { roleState = 1 }; $.each(userDefinedRoles, function (index, item) { if (item.value == roleState) { text = "等待" + item.name + "审核"; return false } }) } } }; if (checkValIsUndefinedOrNull(text)) { $.each(sh, function (index, item) { if (item.value - 2 == state) { text = item.name; return false } }) }; return text }; function getsubcss(type) { var text = ""; switch (+type) { case 0: text = "<span class='wd-nosub'>未提交</span>"; break; case 1: text = "<span class='txt_green'>已提交</span>"; break; default: break }; return text }; function getteacher(type) { var text = ""; switch (+type) { case 0: text = "<span class='txt_yellow'>等待指导教师确认学生选题</span>"; break; case 1: text = "<span class='txt_green'>指导教师确认通过学生选题</span>"; break; case -1: text = "<span class='txt_red'>指导教师确认不通过学生选题</span>"; break; default: break }; return text }; function getprojetype(type) { var text = ""; switch (+type) { case 1: text = "师生互选题目"; break; case 2: text = "指定学生题目"; break; case 3: text = "学生提交题目"; break; case 4: text = "团队题目"; break; default: break }; return text }; function GetGrade() { var name = ''; $.ajax({ url: '../Handler/UserHandler.ashx?action=GetScoreNameData', type: 'post', async: false, dataType: 'json', data: { ScoreID: -1 }, success: function (data) { if (data.isSuccess) { name = data.rows } }, error: function (err) { console.log(err) } }); return name }; function GetGradeNames(number, rowsrole) { var name = ''; $.each(rowsrole, function (i, v) { if (number == v['自定义编号']) { name = v['名称'] } }); return name }; function getRoleName(role) { var roleName = ""; var userDefinedRoles = getUserDefinedRoles(); if (userDefinedRoles && userDefinedRoles.length > 0) { $.each(userDefinedRoles, function (index, item) { if (item.value == role) { roleName = item.name; return false } }) }; return roleName }; var cur_role_academyId = ""; function get_role_academyId() { if (window.parent.cur_role_academyId != undefined && window.parent.cur_role_academyId != "") { return window.parent.cur_role_academyId } else { role_academyId(); return cur_role_academyId } }; function role_academyId() { $.ajax({ url: "../Handler/CommonHandler.ashx?action=GetCurrentAcademyId", async: false, dataType: "text", type: "POST", success: function (data) { if (data != null) { cur_role_academyId = data } } }) }; function getAttachment(opeType, projectId, sid, id) { $.ajax({ url: "../Handler/OpenReport.ashx?action=GetAttachent", dataType: "json", type: "POST", data: { opeType: opeType, projectId: projectId, sid: sid, id: id }, success: function (data) { if (data.isSuccess == true) { if (data.rows.length !== 0) { if (userInfo["文件名"] !== "" && data.rows[0]["附件"] !== "") { $("#fujian").show(); $("#accessory>span").html(data.rows[0]["文件名"]); $("#accessory>a").attr({ "href": data.rows[0]["附件"], download: data.rows[0]["文件名"] }) } else { $("#fujian").hide() } } } } }) }; function getAttachmenthisory(opeType, projectId, sid, id, isHistory, checkFun) { $.ajax({ url: "../Handler/OpenReport.ashx?action=GetAttachent", dataType: "json", type: "POST", data: { opeType: opeType, projectId: projectId, sid: sid, id: id, isHistory: isHistory || "" }, success: function (data) { if (data && data.isSuccess && data.rows && data.rows.length > 0) { if (checkValIsUndefinedOrNull(data.rows[0]["文件名"]) && checkValIsUndefinedOrNull(data.rows[0]["附件"])) { $("#fujian").hide() } else { $("#fujian").show(); $("#accessory>span").html(data.rows[0]["文件名"]); $("#accessory>a").attr({ "href": data.rows[0]["附件"], download: data.rows[0]["文件名"] }); if (!checkValIsUndefinedOrNull(checkFun) && typeof (checkFun) == "function") { checkFun(10, data.rows[0]["编号"], "", 0, "fujian-test") } } } }, error: function (err) { console.log(err) } }) }; function openstuhistoryfile(opeType, projectId, sid, flag) { var text = ""; switch (opeType) { case 1: text = "开题报告历史纪录"; break; case 2: text = "外文译文历史纪录"; break; case 5: text = "中期报告历史纪录"; break; case 10: text = "文献综述历史纪录"; break; case 26: text = "初期检查历史纪录"; default: break }; $.ajax({ url: "../Handler/OpenReport.ashx?action=GetStuFileHistory", data: { projectId: ktbh, sid: sid, opeType: opeType }, dataType: "json", type: "POST", success: function (data) { if (data.isSuccess) { $("#distorylink").show(); $("#distorylink").attr({ "href": 'javascript:openframe(\'' + text + '\', \'../Student/StuHistoryFile.html?projectId=' + projectId + '&sid=' + sid + '&opeType=' + opeType + '&flag=' + (flag == 1 ? 1 : 0) + '\',false)' }) } else { $("#distorylink").hide() } }, error: function (err) { console.log(err) } }) }; function echartsBarChart(BarChartID, BarChartX, BarChartY, BarCharTtitle, BarChartLabelX, BarChartLabelY) { var chart = document.getElementById('' + BarChartID); chart.removeAttribute("_echarts_instance_"); var barChart = echarts.init(chart); var option = { title: { text: '' + BarCharTtitle, x: 'center', y: 'top' }, tooltip: { trigger: 'axis', axisPointer: { type: 'shadow' } }, grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true }, toolbox: { show: true, x: '90%', y: '10', feature: { restore: {}, magicType: { type: ['bar'] }, saveAsImage: {} } }, xAxis: [{ name: '' + BarChartLabelX, nameLocation: 'end', nameTextStyle: { color: 'blue' }, type: 'value', splitLine: { show: true } }], yAxis: [{ name: '' + BarChartLabelY, type: 'category', nameTextStyle: { color: 'blue' }, data: BarChartY, axisTick: { alignWithLabel: true } }], series: [{ name: '题目数', type: 'bar', barWidth: '60%', data: BarChartX, animation: true, barWidth: 30, itemStyle: { normal: { color: function (params) { var colorList = ["#ffc106", "#ff8d0e", "#f5660a", "#e12208", "#a1ad2a", "#6ca13a", "#3c7e36", "#385840", "#529baf", "#2e509d", "#3c329d", "#7e5ccb", "#952278", "#3c87af", "#6ea581", "#bb0a30", "#b19370", "#404c52", "#c17446", "#2aa387", "#48748f"]; return colorList[params.dataIndex] }, label: { show: true, position: 'right', formatter: '{c}' } }, emphasis: { shadowBlur: 10, shadowOffsetX: 0, shadowColor: 'rgba(0, 0, 0, 0.5)' } } }] }; barChart.setOption(option, true) }; function echartsBarChartPercentage(BarChartID, BarChartX, BarChartY, BarCharTtitle, BarChartLabelX, BarChartLabelY) { var chart = document.getElementById('' + BarChartID); chart.removeAttribute("_echarts_instance_"); var barChart = echarts.init(chart); var option = { title: { text: '' + BarCharTtitle, x: 'center', y: 'top' }, tooltip: { trigger: 'axis', axisPointer: { type: 'shadow' }, formatter: "{b}<br/>{a} : {c} %" }, grid: { left: '2%', right: '6%', bottom: '3%', containLabel: true }, toolbox: { show: true, x: '90%', y: '10', feature: { restore: {}, magicType: { type: ['bar'] }, saveAsImage: {} } }, xAxis: [{ name: '' + BarChartLabelX, nameLocation: 'end', nameTextStyle: { color: 'blue' }, type: 'value', axisLabel: { show: true, interval: 'auto', formatter: '{value} %' }, splitLine: { show: true } }], yAxis: [{ name: '' + BarChartLabelY, type: 'category', nameTextStyle: { color: 'blue' }, data: BarChartY, axisTick: { alignWithLabel: true } }], series: [{ name: '' + BarChartLabelX, type: 'bar', barWidth: '60%', data: BarChartX, animation: true, barWidth: 30, itemStyle: { normal: { color: function (params) { var colorList = ["#ffc106", "#ff8d0e", "#f5660a", "#e12208", "#a1ad2a", "#6ca13a", "#3c7e36", "#385840", "#529baf", "#2e509d", "#3c329d", "#7e5ccb", "#952278", "#3c87af", "#6ea581", "#bb0a30", "#b19370", "#404c52", "#c17446", "#2aa387", "#48748f"]; return colorList[params.dataIndex] }, label: { show: true, position: 'right', formatter: '{c}%' } }, emphasis: { shadowBlur: 5, shadowOffsetX: 0, shadowColor: 'rgba(0, 0, 0, 0.2)' } } }] }; barChart.setOption(option, true) }; function lineChartCount(chertId, lineChartX, lineChartY, title) { var myChart = echarts.init(document.getElementById(chertId)); var option = { title: { text: title, x: 'center' }, grid: { left: '3%', right: '5%', bottom: '15%', containLabel: true }, tooltip: { trigger: 'axis', formatter: "{a}<br/>{b} : {c}篇" }, toolbox: { show: true, x: '90%', y: '10', dataView: { show: true, readOnly: true }, feature: { restore: {}, magicType: { type: ['funnel', 'line', 'bar'] }, saveAsImage: {} } }, calculable: true, xAxis: [{ axisLabel: { rotate: 30, interval: 0, }, type: 'category', boundaryGap: false, data: lineChartY }], yAxis: [{ type: 'value' }], series: [{ name: title, type: "line", itemStyle: { normal: { color: "#66AEDE", lineStyle: { color: "#66AEDE" }, label: { show: true, position: 'top', formatter: '{c}篇' } } }, smooth: 0.3, data: lineChartX }] }; myChart.setOption(option) }; function lineChartPercent(chertId, lineChartX, lineChartY, title) { var myChart = echarts.init(document.getElementById(chertId)); var option = { title: { text: title, x: 'center' }, grid: { left: '3%', right: '5%', bottom: '15%', containLabel: true }, toolbox: { show: true, x: '90%', y: '10', dataView: { show: true, readOnly: true }, feature: { restore: {}, magicType: { type: ['line', 'bar'] }, saveAsImage: {} } }, tooltip: { trigger: 'axis', formatter: "{a}<br/>{b} : {c}%" }, calculable: true, xAxis: [{ axisLabel: { rotate: 30, interval: 0 }, type: 'category', boundaryGap: false, data: lineChartY }], yAxis: [{ type: 'value', axisLabel: { show: true, interval: 'auto', formatter: '{value} %' }, show: true }], series: [{ name: title, type: "line", itemStyle: { normal: { color: "#66AEDE", lineStyle: { color: "#66AEDE" }, label: { show: true, position: 'top', formatter: '{c}%' } } }, smooth: 0.3, data: lineChartX }] }; myChart.setOption(option) }; function echartsPieChart(ChartId, data, title) { var chart = document.getElementById('' + ChartId); chart.removeAttribute("_echarts_instance_"); var echartsPie = echarts.init(chart); var lableData = []; $.each(data, function (i, v) { lableData.push(v['name']) }); var option = { title: { text: title, x: 'center' }, tooltip: { trigger: 'item', formatter: "{a}<br/>{b} : {c} ({d}%)" }, legend: { orient: 'vertical', x: 'left', data: lableData }, toolbox: { show: true, feature: { mark: { show: true }, dataView: { show: true, readOnly: true }, magicType: { show: true, type: ['pie', 'funnel'], option: { funnel: { x: '25%', width: '50%', funnelAlign: 'left', max: 1548 } } }, restore: { show: true }, saveAsImage: { show: true } } }, calculable: true, series: [{ name: title.substring(0, title.length - 3), type: 'pie', radius: '60%', center: ['50%', '60%'], data: data, itemStyle: { normal: { label: { show: true, formatter: '{b} : {c} \n ({d}%)' }, labelLine: { show: true } }, emphasis: { shadowBlur: 10, shadowOffsetX: 0, shadowColor: 'rgba(0, 0, 0, 0.5)' } } }], color: ["#ffc106", "#f5660a", "#6ca13a", "#2e509d", "#ff8d0e", "#3c329d", "#7e5ccb", "#952278", "#e12208", "#3c87af", "#6ea581", "#bb0a30", "#a1ad2a", "#b19370", "#404c52", "#3c7e36", "#c17446", "#2aa387", "#385840", "#48748f", "#529baf"] }; echartsPie.setOption(option, true) }; function returnTestingResult(state, result, resultTxt, time) { var jiancejieguo = ""; if (!checkValIsUndefinedOrNull(state)) { if (UrlDecode(state) == 0) { if (checkValIsUndefinedOrNull(result)) { jiancejieguo = "等待检测中" } else { try { jiancejieguo = UrlDecode(resultTxt) } catch (e) { jiancejieguo = resultTxt } } } else if (UrlDecode(state) == 4) { if (checkValIsUndefinedOrNull(result) || result == -0.5) { jiancejieguo = "等待导师审核通过后检测" } else { try { jiancejieguo = UrlDecode(resultTxt) } catch (e) { jiancejieguo = resultTxt } } } else if (UrlDecode(state) == 5) { jiancejieguo = "等待导师确认后检测" } else if (UrlDecode(state) == 6) { jiancejieguo = "等待导师确认后到期检测" } else if (UrlDecode(state) == 7) { jiancejieguo = "等待导师审核后到期检测" } else if (UrlDecode(state) == 3 || UrlDecode(state) == 8 || UrlDecode(state) == 9) { if (checkValIsUndefinedOrNull(time)) { jiancejieguo = '' } else { var time1 = +(new Date()); var time2 = '' + time; time2 = time2.replace(new RegExp("-", "gm"), "/"); time2 = (new Date(time2)).getTime(); if (time1 > time2) { if (checkValIsUndefinedOrNull(result)) { jiancejieguo = "等待检测中" } else { try { jiancejieguo = UrlDecode(resultTxt) } catch (e) { jiancejieguo = resultTxt } } } else if (time1 <= time2) { jiancejieguo = "到期检测<br />" + time } } } else if (UrlDecode(state) == -3) { jiancejieguo = "未提交论文，不检测" } else { jiancejieguo = "<span class='txt_red'>不检测</span>" } } return jiancejieguo }; function WarningPicture_Long(copy) { if (copy < 0 || copy >= 1000) { return GetErrorWords(copy) } else { if (copy == null) { return "" } else if (copy >= 50) { return "<span class=\"per_r\" title=\"文字复制比\">" + copy + "%</span>" } else if (copy >= 40) { return "<span class=\"per_o\" title=\"文字复制比\">" + copy + "%</span>" } else if (copy > 0) { return "<span class=\"per_y\" title=\"文字复制比\">" + copy + "%</span>" } else { return "<span class=\"per_g\" title=\"文字复制比\">0%</span>" } } }; function GetErrorWords(copy) { if (copy == -8) { return "<span style=\"color:#FF0000\">检测出错</span>" } else if (copy == -4) { return "<span style=\"color:#666666\">格式不符</span>" } else if (copy == -5) { return "<span style=\"color:#666666\">读取失败</span>" } else if (copy == -6) { return "<span style=\"color:#666666\">内容太长</span>" } else if (copy == -3) { return "<span style=\"color:#666666\">内容过短，不支持检测</span>" } else if (copy == -9) { return "<span style=\"color:#666666\">未检测</span>" } else if (copy == -7) { return "<span style=\"color:#666666\">正在解析</span>" } else if (copy == -10) { return "<span style=\"color:#666666\">文档解析失败</span>" } else if (copy == -11) { return "<span style=\"color:#666666\">解析失败</span>" } else if (copy == 1000) { return "<span style=\"color:#666666\">文件保存失败</span>" } else if (copy == 1100) { return "<span style=\"color:#666666\">内容过短，不支持检测</span>" } else if (copy == 1101) { return "<span style=\"color:#666666\">内容太长</span>" } else if (copy == 1102) { return "<span style=\"color:#666666\">格式不符</span>" } else if (copy == 1103) { return "<span style=\"color:#666666\">文件读取错误</span>" } else if (copy == 1104) { return "<span style=\"color:#666666\">压缩包部分文件未检测</span>" } else if (copy == 1105) { return "<span style=\"color:#666666\">压缩包内文件内容获取失败</span>" } else if (copy == 1106) { return "<span style=\"color:#666666\">未知错误</span>" } else if (copy == 1107) { return "<span style=\"color:#666666\">剩余检测篇数不足</span>" } else if (copy == 1108) { return "<span style=\"color:#666666\">今日上传数量已达上限</span>" } else if (copy == 1109) { return "<span style=\"color:#666666\">未付费文章数量已达上限</span>" } else { return "<span style=\"color:#FF0000\">处理中</span>" } }; function replaceUnequa(data) { if (!checkValIsUndefinedOrNull(data) && !isNumber(data)) { if (data.indexOf("<=") >= 0) { data = data.replace(/<=/g, "&le;") }; if (data.indexOf(">=") >= 0) { data = data.replace(/>=/g, "&ge;") }; if (data.indexOf("<") >= 0) { data = data.replace(/</g, "&lt;") }; if (data.indexOf(">") >= 0) { data = data.replace(/>/g, "&gt;") }; if (data.indexOf('"') >= 0) { data = data.replace(/"/g, "&quot;") }; if (data.indexOf("'") >= 0) { data = data.replace(/'/g, "&apos;") } }; return data }; function retrieveUnequa(data, noBlank) { if (!checkValIsUndefinedOrNull(data) && !isNumber(data)) { var reg = /<[\s]*script[^>]*>/ig; var reg2 = /<[\s]*\/[\s]*script[\s]*>/ig; if (data == "DesignTable") { data = "" } if (!noBlank && data.indexOf("&nbsp;") >= 0) { data = data.replace(/&nbsp;/g, " ") }; if (data.indexOf("&le;") >= 0) { data = data.replace(/&le;/g, "<=") }; if (data.indexOf("&ge;") >= 0) { data = data.replace(/&ge;/g, ">=") }; if (data.indexOf("&lt;") >= 0) { data = data.replace(/&lt;/g, "<") }; if (data.indexOf("&gt;") >= 0) { data = data.replace(/&gt;/g, ">") }; if (data.indexOf("&quot;") >= 0) { data = data.replace(/&quot;/g, '"') }; if (data.indexOf("&apos;") >= 0) { data = data.replace(/&apos;/g, "'") }; if (reg2.test(data)) { data = data.replace(reg2, "") }; if (reg.test(data)) { data = data.replace(reg, "") } }; return data }; function retrieveBr(data) { if (!checkValIsUndefinedOrNull(data) && !isNumber(data)) { data = data.replace(/(<br>)|(<br\/>)|(<br \/>)/g, "\n") } return data }; function replaceBr(data) { if (!checkValIsUndefinedOrNull(data)) { data = ('' + data).replace(/(\n\n\n\n)|(\n\n\n)|(\n\n)|\n/g, "<br/>") }; return data }; function GetSetTimeRs(funModelEnum, stuAcademiesNum) { var rs = true; $.ajax({ url: "../Handler/SuperAuthority.ashx?action=GetSetTimeRs", type: "post", dataType: "json", async: false, data: { funModelEnum: funModelEnum, stuAcademiesNum: stuAcademiesNum }, success: function (result) { if (result.isSuccess == false) { rs = false } }, error: function (err) { myMessage("获取数据失败") } }); return rs }; function getCheckState(opeType, checkedId, academyNum) { var xhr = $.ajax({ url: "../Handler/Project.ashx?action=GetAllAuditState", data: { opeType: opeType, academyNum: academyNum || 0, }, dataType: "json", async: false, type: "POST", success: function (data) { if (data.isSuccess == true) { if (checkedId) { data.rows.unshift({ "StateValue": "all", "StateText": "全部", selected: true }); $("#" + checkedId).combobox({ valueField: 'StateValue', textField: 'StateText', data: data.rows }) } } }, error: function (err) { console.log(err) } }); return xhr }; function getProTypeAndProSource(type, htmlID) { var xhr = $.ajax({ url: "../Handler/SystemSet.ashx?action=GetDictList", data: { fenlei: type }, dataType: "json", type: "POST", async: false, success: function (data) { if (data && data.isSuccess) { data.rows.unshift({ "ID": 0, "名称": "请选择", 'selected': true }); $("#" + htmlID).combobox({ valueField: 'ID', textField: '名称', data: data.rows }) } }, error: function (err) { console.log(err) } }); return xhr }; function getScoreSelected(selectedID) { $.ajax({ url: "../Handler/ReviewHandler.ashx?action=GetSelectScore", dataType: "json", type: "POST", success: function (data) { if (data.isSuccess) { $("#" + selectedID).combobox({ valueField: 'value', textField: 'text', data: data.rows, onLoadSuccess: function () { $("#" + selectedID).combobox("setValue", data.rows[0]["value"]) } }) } }, error: function (err) { console.log(err) } }) }; function getXuanZeZhuanYe(htmlID) { var xhr = $.ajax({ url: "../Handler/CommonHandler.ashx?action=IsCanSetALLScool", dataType: "json", type: "POST", success: function (data) { if (data.isSuccess) { if (data.rows[0]["是否可以设置为全校"] == "1") { $("#" + htmlID).show().next().show() } else { $("#" + htmlID).hide().next().hide() } } }, error: function (err) { console.log(err) } }); return xhr }; function initUEditor(richTextIds, option) { var htmlEditor = new Array(); if (htmlEditor.length > 0) { return }; if (option == null || option == undefined) { option = { toolbars: [['undo', 'redo', 'bold', 'italic', 'underline', 'strikethrough', 'subscript', 'superscript', '|', 'formatmatch', 'removeformat', 'cleardoc', '|', 'forecolor', 'backcolor', 'fontfamily', 'fontsize', '|', 'searchreplace', 'indent', 'justifyleft', 'justifyright', 'justifycenter', 'justifyjustify', 'insertorderedlist', 'insertunorderedlist', 'lineheight', 'rowspacingtop', 'rowspacingbottom', 'pagebreak', '|', 'imagenone', 'imageleft', 'imageright', 'imagecenter', 'edittip ', '|', 'inserttable', 'insertrow', 'insertcol', 'mergeright', 'mergedown', 'deleterow', 'deletecol', 'splittorows', 'splittocols', 'splittocells', 'deletecaption', 'inserttitle', 'mergecells', 'deletetable', '|', 'custombtn', 'kityformula',]], autoHeightEnabled: false, autoFloatEnabled: true, initialContent: '', focus: false, autoClearinitialContent: false, initialFrameHeight: 300, fullscreen: false, pasteplain: true, enableAutoSave: false, wordCount: false, maximumWords: 999999, setImageSize: 5, zIndex: 999 } } $.each(richTextIds, function (index, value) { if (!checkValIsUndefinedOrNull(value)) { try { htmlEditor[index] = UE.getEditor(value, option); htmlEditor[index].addListener("contentChange", function () { $("#" + value).siblings('p').find(".writerText>i").html(" " + getTextNumber(htmlEditor[index].getContentTxt()) + " ") }) } catch (ex) { console.error(ex) } } }); window.htmlEditor = htmlEditor }; function getUEditorContent(richTextId) { if (!checkValIsUndefinedOrNull(richTextId)) { var content = UE.getEditor(richTextId).getContent(); return content } else { return "" } } function setUEditorContent(richTextId, content) { if (!checkValIsUndefinedOrNull(richTextId)) { var editor = UE.getEditor(richTextId); editor.ready(function () { setTimeout(function () { editor.setContent(content, false) }, 100) }) } } function setUEditorDisabled(richTextId) { if (!checkValIsUndefinedOrNull(richTextId)) { UE.getEditor(richTextId).setDisabled('fullscreen') } } function setUEditorEnabled(richTextId) { if (!checkValIsUndefinedOrNull(richTextId)) { UE.getEditor(richTextId).setEnabled() } } function uParseUEditor(richTextIds) { $.each(richTextIds, function (index, value) { if (!checkValIsUndefinedOrNull(value)) { uParse('#' + value, { 'liiconpath': '/scripts/ueditor/themes/ueditor-list/' }) } }) } function initRangyUEditor(richTextIds) { var option = { toolbars: [['undo', 'redo', 'bold', 'italic', '|', 'forecolor', 'backcolor', 'fontfamily', 'fontsize', '|', 'custombtn', 'kityformula',]], autoHeightEnabled: false, autoFloatEnabled: true, initialContent: '', focus: false, autoClearinitialContent: false, initialFrameHeight: 300, fullscreen: false, pasteplain: true, enableAutoSave: false, wordCount: false, maximumWords: 999999, setImageSize: 10, zIndex: 9999 }; initUEditor(richTextIds, option) }